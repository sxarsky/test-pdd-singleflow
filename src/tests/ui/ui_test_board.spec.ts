// Generated by Skyramp v0.5.0.72bbbd01 on 2025-10-30 12:04:58.478949 -0700 PDT m=+64927.946919251
// Command: skyramp generate ui rest \
// 		--framework playwright \
// 		--language typescript \
// 		--output ui_test_board.spec.ts \
// 		--output-dir /Users/syedsky/Skyramp/projects/Atlassian/DNDTests/workingDir \
// 		--overwrite true \
// 		--playwright-trace /Users/syedsky/Skyramp/projects/Atlassian/DNDTests/workingDir/skyramp_playwright.zip \
// 		--rawTrace true \

// Import of required libraries
import { test } from '@playwright/test';
import { expect, getValue, newSkyrampPlaywrightPage } from '@skyramp/skyramp';

const pageTimeout = 15000;

/**
 * Helper function to login to the application
 * @param page - Playwright page object
 * @param email - User email
 * @param password - User password
 */
async function loginToApplication(page: any, email: string, password: string) {
    await page.getByRole("textbox", { name: "Email" }).click();
    const playwrightRequest0: Record<string, any> = {
        "email": email,
        "password": password
    };

    await page.getByRole("textbox", { name: "Email" }).fill(getValue(playwrightRequest0, "email"));
    await page.getByRole("textbox", { name: "Password" }).click();
    await page.getByRole("textbox", { name: "Password" }).fill(getValue(playwrightRequest0, "password"));
    // Wait to finish any potential hydration
    await page.waitForTimeout(1500);
    const responsePromise0 = page.waitForResponse("**/api/auth/signin**");
    await page.getByRole("button", { name: "Log In" }).click();
    const response0 = await responsePromise0;
}

/**
 * Helper function to reset the database
 * @param page - Playwright page object
 */
async function resetDatabase(page: any) {
    await page.getByRole("button", { name: "Profile" }).click();
    const responsePromise1 = page.waitForResponse("**/api/admin/reset**");
    await page.getByTestId("reset-database-button").click();
    const response1 = await responsePromise1;
}

/**
 * Helper function to drag a task card to another task card
 * @param page - Playwright page object
 * @param sourceDragHandle - Test ID of the source card drag handle
 * @param targetCard - Test ID of the target card
 */
async function dragTaskByHandle(page: any, sourceDragHandle: string, targetCard: string) {
    await page.locator(`[data-testid="${sourceDragHandle}"]`).dragTo(page.locator(`[data-testid="${targetCard}"]`));
}

/**
 * Helper function to drag a task card with specific positions
 * @param page - Playwright page object
 * @param sourceCard - Test ID of the source card
 * @param targetCard - Test ID of the target card
 * @param sourceX - X position on source card
 * @param sourceY - Y position on source card
 * @param targetX - X position on target card
 * @param targetY - Y position on target card
 */
async function dragTaskWithPositions(page: any, sourceCard: string, targetCard: string, sourceX: number, sourceY: number, targetX: number, targetY: number) {
    await page.getByTestId(sourceCard).dragTo(
        page.getByTestId(targetCard, { exact: true }),
        {
            sourcePosition: { x: sourceX, y: sourceY },
            targetPosition: { x: targetX, y: targetY }
        }
    );
}

test('testUi', async ({ page }) => {
    test.setTimeout(60000);
    // set default timeout for all locator/page actions in this test
    page.setDefaultTimeout(pageTimeout);

    // wrap playwright page with Skyramp page
    page = newSkyrampPlaywrightPage(page);

    await page.goto("http://localhost:5173/");
    
    // Login to the application
    await loginToApplication(page, "demo@example.com", "password123");

    // Reset database to ensure clean state
    await resetDatabase(page);

    // Navigate to My Tasks section
    await page.getByRole("button", { name: "My Tasks" }).click();
    
    // Verify initial state - Review column has 1 task
    await expect(page.getByTestId("tasks-column-count-review")).toContainText("1");
    
    // Drag task 8 by its handle to task 5
    await dragTaskByHandle(page, "tasks-card-drag-handle-8", "tasks-card-5");
    
    // Verify Review column now has 2 tasks
    await expect(page.getByTestId("tasks-column-count-review")).toContainText("2");
    
    // Verify task 9 is in position 2
    await expect(page.getByTestId("tasks-card-order-9")).toContainText("2");
    
    // Drag task 9 to task 3 with specific positions
    await dragTaskWithPositions(page, "tasks-card-9", "tasks-card-3", 43, 211, 69, 0);
    
    // Verify task 9 is now in position 1
    await expect(page.getByTestId("tasks-card-order-9")).toContainText("1");
});

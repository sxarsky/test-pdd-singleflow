// Generated by Skyramp v0.5.0.72bbbd01 on 2025-10-30 14:33:43.631345 -0700 PDT m=+4310.502338459
// Command: skyramp generate ui rest \
// 		--framework playwright \
// 		--language typescript \
// 		--output ui_test_calendar.spec.ts \
// 		--output-dir /Users/syedsky/Skyramp/projects/Atlassian/DNDTests/workingDir \
// 		--overwrite true \
// 		--playwright-trace /Users/syedsky/Skyramp/projects/Atlassian/DNDTests/workingDir/skyramp_playwright.zip \
// 		--rawTrace true \

// Import of required libraries
import { test } from '@playwright/test';
import { expect, getValue, newSkyrampPlaywrightPage } from '@skyramp/skyramp';

const pageTimeout = 15000;

/**
 * Helper function to log in a user
 */
async function loginUser(page: any, email: string, password: string) {
    await page.getByRole("textbox", { name: "Email" }).click();
    const playwrightRequest0: Record<string, any> = {
        "email": email,
        "password": password
    };

    await page.getByRole("textbox", { name: "Email" }).fill(getValue(playwrightRequest0, "email"));
    await page.getByRole("textbox", { name: "Password" }).click();
    await page.getByRole("textbox", { name: "Password" }).fill(getValue(playwrightRequest0, "password"));
    // Wait to finish any potential hydration
    await page.waitForTimeout(1500);
    const responsePromise0 = page.waitForResponse("**/api/auth/signin**");
    await page.getByRole("button", { name: "Log In" }).click();
    const response0 = await responsePromise0;
}

/**
 * Helper function to reset the database
 */
async function resetDatabase(page: any) {
    await page.getByRole("button", { name: "Profile" }).click();
    const responsePromise1 = page.waitForResponse("**/api/admin/reset**");
    await page.getByTestId("reset-database-button").click();
    const response1 = await responsePromise1;
}

/**
 * Helper function to navigate to calendar and select a month
 */
async function navigateToCalendarAndSelectMonth(page: any, firstMonth: string, secondMonth: string) {
    await page.getByRole("button", { name: "Calendar" }).click();
    await page.getByTestId("calendar-month-select").selectOption(firstMonth);
    await page.getByTestId("calendar-month-select").selectOption(secondMonth);
}

/**
 * Helper function to drag a task card to a new date and verify the change
 */
async function dragTaskToDateAndVerify(page: any, taskId: string, initialDate: string, targetCell: string, expectedDate: string) {
    await expect(page.getByTestId(taskId)).toContainText(initialDate);
    await page.locator(`[data-testid="${taskId}"]`).dragTo(page.locator(`[data-testid="${targetCell}"]`));
    await expect(page.getByTestId(taskId)).toContainText(expectedDate);
}

test('testUi', async ({ page }) => {
    test.setTimeout(60000);
    // set default timeout for all locator/page actions in this test
    page.setDefaultTimeout(pageTimeout);

    // wrap playwright page with Skyramp page
    page = newSkyrampPlaywrightPage(page);

    await page.goto("http://localhost:5173/");
    
    // Login to the application
    await loginUser(page, "demo@example.com", "password123");

    // Reset the database to ensure clean state
    await resetDatabase(page);

    // Navigate to calendar and select October
    await navigateToCalendarAndSelectMonth(page, "4", "9");

    // Drag task card from Oct 15 to Oct 23 and verify
    await dragTaskToDateAndVerify(page, "abbreviated-task-card-4", "Oct 15", "calendar-cell-2025-10-23", "Oct 23");
});

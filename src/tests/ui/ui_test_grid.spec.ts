// Generated by Skyramp v0.5.0.72bbbd01 on 2025-10-30 14:15:42.545939 -0700 PDT m=+3229.411115959
// Command: skyramp generate ui rest \
// 		--framework playwright \
// 		--language typescript \
// 		--output ui_test_grid.spec.ts \
// 		--output-dir /Users/syedsky/Skyramp/projects/Atlassian/DNDTests/workingDir \
// 		--overwrite true \
// 		--playwright-trace /Users/syedsky/Skyramp/projects/Atlassian/DNDTests/workingDir/skyramp_playwright.zip \
// 		--rawTrace true

// Import of required libraries
import { test } from '@playwright/test';
import { expect, getValue, newSkyrampPlaywrightPage } from '@skyramp/skyramp';

const pageTimeout = 15000;

// Helper function: Login user with credentials
async function loginUser(page: any, email: string, password: string) {
    await page.goto("http://localhost:5173/");
    await page.getByRole("textbox", { name: "Email" }).click();
    const playwrightRequest0: Record<string, any> = {
        "email": email,
        "password": password
    };

    await page.getByRole("textbox", { name: "Email" }).fill(getValue(playwrightRequest0, "email"));
    await page.getByRole("textbox", { name: "Password" }).click();
    await page.getByRole("textbox", { name: "Password" }).fill(getValue(playwrightRequest0, "password"));
    // Wait to finish any potential hydration
    await page.waitForTimeout(1500);
    const responsePromise0 = page.waitForResponse("**/api/auth/signin**");
    await page.getByRole("button", { name: "Log In" }).click();
    const response0 = await responsePromise0;
}

// Helper function: Reset database
async function resetDatabase(page: any) {
    await page.getByRole("button", { name: "Profile" }).click();
    const responsePromise1 = page.waitForResponse("**/api/admin/reset**");
    await page.getByTestId("reset-database-button").click();
    const response1 = await responsePromise1;
}

// Helper function: Verify and perform drag-and-drop in priority grid
async function verifyAndDragPriorityGridTasks(page: any, sourcePosition: number, targetPosition: number, sourceTaskId: string, targetTaskId: string) {
    await page.getByRole("button", { name: "Priority Grid" }).click();
    await expect(page.getByTestId(`priority-grid-task-position-${sourcePosition}`)).toContainText(sourceTaskId);
    await expect(page.getByTestId(`priority-grid-task-position-${targetPosition}`)).toContainText(targetTaskId);
    await page.getByTestId(`priority-grid-task-position-${sourcePosition}`).dragTo(
            page.getByTestId(`priority-grid-task-position-${targetPosition}`, { exact: true }),
            {
                sourcePosition: { x: 29, y: 17 },
                targetPosition: { x: 0, y: 10 }
            }
        );
    await expect(page.getByTestId(`priority-grid-task-position-${sourcePosition}`)).toContainText(targetTaskId);
    await expect(page.getByTestId(`priority-grid-task-position-${targetPosition}`)).toContainText(sourceTaskId);
}

test('testUi', async ({ page }) => {
    test.setTimeout(60000);
    // set default timeout for all locator/page actions in this test
    page.setDefaultTimeout(pageTimeout);

    // wrap playwright page with Skyramp page
    page = newSkyrampPlaywrightPage(page);

    // Login with demo credentials
    await loginUser(page, "demo@example.com", "password123");

    // Reset the database to ensure clean state
    await resetDatabase(page);

    // Verify and perform drag-and-drop test in priority grid
    await verifyAndDragPriorityGridTasks(page, 2, 1, "#3", "#1");
});
